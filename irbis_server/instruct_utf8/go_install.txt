Установка Go на Ubuntu

Для установки вам потребуется последняя версии Go 1.19, которую можно скачать на официальной странице. На сайте вы найдете URL для тарбола текущего бинарного релиза вместе с его хешем SHA256.

Посетите официальную страницу скачиваний Go и найдите URL для тарбола текущего бинарного релиза вместе с его хешем SHA256. Убедитесь, что вы находитесь в домашней директории и используйте curl для получения тарбола:
Shell
cd ~
curl -O https://dl.google.com/go/go1.19.1.linux-amd64.tar.gz

Затем вы можете использовать sha256sum  для утверждения тарбола:
Shell
sha256sum go1.19.1.linux-amd64.tar.gz

Образец вывода:
Shell
go1.19.1.linux-amd64.tar.gz
acc512fbab4f716a8f97a8b3fbaa9ddd39606a28be6c2515ef7c6c6311acffde  go1.19.1.linux-amd64.tar.gz

Вы получите хеш, как тот, что выделен в выводе выше. Убедитесь, что он совпадает с тем, что находится на странице загрузок.

Скачать Golang 1.19 Ubuntu

Затем, используйте команду tar для извлечения файлов из тарбола. Флаг x говорит tar об извлечении, v сообщает, что нам нужен полный вывод c подробной информацией о файлах (список извлеченных файлов), а f говорит о том, что мы уточним название файла.
Shell
tar xvf go1.19.1.linux-amd64.tar.gz

Теперь в домашней папке у вас должна быть директория под названием go. Рекурсивно измените владельца папки go и группы к root, и перейдите в /usr/local:
Shell
sudo chown -R root:root ./go
sudo mv go /usr/local

    На заметку: Хотя рекомендуется использовать локацию /usr/local/go, некоторые пользователи выбирают место по своему усмотрению.

Настройка GOPATH в Ubuntu

На данном этапе мы настроим некоторые пути вашей среды.

Для начала установим значение, которая сообщает Go, где искать файлы.
Shell
sudo nano ~/.profile

В конце файла добавьте следующую строку:
Go
export GOPATH=$HOME/work
export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin

Если вы выберете альтернативное место установки Go, то и в файле выше должны быть указаны ваши пути к Go. Данный пример показывает настройки на тот случай, если Go установлен в домашней директории:
Go
export GOROOT=$HOME/go
export GOPATH=$HOME/work
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin

Сохраните и закройте файл. Затем обновите профиль, выполнив:
Shell
source ~/.profile

Тестирование Go после установки

Теперь, когда Go установлен и пути настроены, вы можете провести тесты, чтобы убедиться, что Go работает должным образом.

Создайте новую директорию для рабочего пространства Go, куда Go будет размещать созданные файлы:
Shell
mkdir $HOME/work

Затем создайте директорию иерархии данной папки через данную команду, чтобы создать тестовый файл. Вы можете заменить значение user своим именем пользователя на GitHub, если вы планируете использовать Git для коммитов и хранения кода Go на GitHub. Если вы не планируете использовать GitHub для хранения и управления кодом, структура вашей папки можете отличаться, к примеру ~/my_project.
Shell
mkdir -p work/src/github.com/user/hello

Затем создаем простой Go файл «Hello World».
Shell
nano ~/work/src/github.com/user/hello/hello.go

Внутри редактора вставьте нижеуказанный код, что использует пакеты Go, импортирует форматированные содержимого, и создает новую функцию для вывода “Hello, World” при запуске.
Go
package main
 
import "fmt"
 
func main() {
    fmt.Printf("hello, world\n")
}

Данная программа выводит “hello, world” при успешном запуске, что указывает на то, что программы Go скомпилированы верным образом. Сохраните и закройте файл, затем компилируйте его через вызов команды go install:
Shell
go install github.com/user/hello

Вы можете запустить скомпилированный файл через простое выполнение команды:
Shell
hello

Если программа возвращает “hello, world”, тогда Go установлен успешно и является функциональным. Вы можете увидеть, что скомпилированный hello установлен, использовав команду which:
Shell
which hello

Вывод:
Shell
/home/user/work/bin/hello